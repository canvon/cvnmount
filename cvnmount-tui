#!/bin/bash

BASENAME="${0##*/}"

warn() {
	echo "$BASENAME: $*" >&2
}

die() {
	warn "Fatal: $*"
	exit 1
}


action-mount() {
	local USER_DSTS=()

	local SRC DST TYPE OPTS DUMMY
	while read SRC DST TYPE OPTS DUMMY
	do
		# Skip comments.
		[ "${SRC:0:1}" = "#" ] && continue

		# Skip empty lines.
		[ -n "$SRC" ] || continue

		grep -q -E '(^|,)users?(,|$)' <<<"$OPTS" || continue

		# Append to bash array.
		USER_DSTS=("${USER_DSTS[@]}" "$DST")
	done </etc/fstab

	local CHOICE_TITLE="Select a user-mountable mount point to mount:"
	give-choice-title

	local PS3="$BASENAME mount> "

	local DST
	select DST in "${USER_DSTS[@]}"
	do
		if [ -z "$DST" ]
		then
			case "$REPLY" in
			\?|help)
				give-hint
				continue
				;;
			0|exit|quit)
				echo "Exit $BASENAME action mount."
				break
				;;
			*)
				warn "mount prompt: Invalid reply \"$REPLY\"!"
				continue
				;;
			esac
		fi

		echo "Mounting $DST ..."
		mount "$DST" || warn "Error: Mounting $DST failed"
	done

	return 0
}

action-umount() {
	warn "Action umount: Not implemented, yet."
	return 1
}

action-list-mounts() {
	local CONF_DSTS=()

	local SRC DST TYPE OPTS DUMMY
	while read SRC DST TYPE OPTS DUMMY
	do
		# Skip comments.
		[ "${SRC:0:1}" = "#" ] && continue

		# Skip empty lines.
		[ -n "$SRC" ] || continue

		# Append to bash array.
		CONF_DSTS=("${CONF_DSTS[@]}" "$DST")
	done </etc/fstab


	local MOUNTED_DSTS=()

	while read SRC DST TYPE OPTS DUMMY
	do
		local CONF_DST
		for CONF_DST in "${CONF_DSTS[@]}"
		do
			if [ "$DST" = "$CONF_DST" ]
			then
				MOUNTED_DSTS=("${MOUNTED_DSTS[@]}" "$DST")
			fi
		done
	done </proc/mounts

	local CHOICE_TITLE="Retrieve mount details for a configured & mounted mount point:"
	give-choice-title

	local PS3="$BASENAME list-mounts> "

	local DST
	select DST in "${MOUNTED_DSTS[@]}"
	do
		if [ -z "$DST" ]
		then
			case "$REPLY" in
			\?|help)
				give-hint
				continue
				;;
			0|exit|quit)
				echo "Exit $BASENAME action list-mounts."
				break
				;;
			*)
				warn "list-mounts prompt: Invalid reply \"$REPLY\"!"
				continue
				;;
			esac
		fi

		echo "Mount details for mount point $DST:"
		awk "\$2 == \"$DST\" { print }" </proc/mounts || warn "Error: Extracting mount details for mount point $DST failed"
	done

	return 0
}

action-kerberos() {
	warn "Action Kerberos: Not implemented, yet."
	return 1
}


CHOICE_TITLE="What do you want to do today?"

give-choice-title() {
	echo
	echo "$CHOICE_TITLE"
	echo
}
give-hint() {
	give-choice-title
	echo "Hint: Enter the number of an option you want to invoke,"
	echo "      or 0 or ^D (Ctrl-D, End-of-Transmission) to exit"
	echo "      to enclosing scope. Press enter without any input"
	echo "      to repeat the list of options."
	echo
}
give-hint

ORIG_PS3="$PS3"

PS3="$BASENAME> "

VALID_ACTIONS=(mount umount list-mounts kerberos)
select ACTION in "${VALID_ACTIONS[@]}"
do
	if [ -z "$ACTION" ]
	then
		case "$REPLY" in
		\?|help)
			give-hint
			continue
			;;
		0|exit|quit)
			echo "Exit $BASENAME."
			break
			;;
		*)
			# Try to lookup an action for the reply string-wise.
			for OTHER_ACTION in "${VALID_ACTIONS[@]}"
			do
				if [ "$REPLY" = "$OTHER_ACTION" ]
				then
					ACTION="$OTHER_ACTION"
					break
				fi
			done

			# Still no action to invoke?
			if [ -z "$ACTION" ]
			then
				warn "Invalid reply \"$REPLY\"!"
				continue
			fi
			# Otherwise, fall-through.
			;;
		esac
	fi

	action-"$ACTION" || warn "Warning: Action \"$ACTION\" seems to have been unsuccessful."
done

exit 0
