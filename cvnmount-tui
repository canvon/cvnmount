#!/bin/bash

BASENAME="${0##*/}"

warn() {
	echo "$BASENAME: $*" >&2
}

die() {
	warn "Fatal: $*"
	exit 1
}


read-mounts() {
	TMP_DSTS=()

	local SRC DST TYPE OPTS DUMMY
	while read SRC DST TYPE OPTS DUMMY
	do
		# Skip comments.
		[ "${SRC:0:1}" = "#" ] && continue

		# Skip empty lines.
		[ -n "$SRC" ] || continue

		# Filter to only user-mountable?
		if [ -n "$_ONLY_USER" ]
		then
			if [ -n "$USER_MODE" ]
			then
				# In user mode, filter to only user-mountable mount points.
				grep -q -E '(^|,)users?(,|$)' <<<"$OPTS" || continue
			fi
		fi

		# Filter to only configured?
		if [ -n "$_ONLY_CONF" ]
		then
			local CONF_DST FOUND=
			for CONF_DST in "${CONF_DSTS[@]}"
			do
				if [ "$DST" = "$CONF_DST" ]
				then
					FOUND=yes
					break
				fi
			done
			[ -n "$FOUND" ] || continue
		fi

		# Append to bash array.
		TMP_DSTS=("${TMP_DSTS[@]}" "$DST")
	done

	return 0
}

action-mount() {
	local TMP_DSTS=()
	_ONLY_USER=yes read-mounts </etc/fstab
	local CONF_DSTS=("${TMP_DSTS[@]}")


	local NOTMOUNTED_DSTS=()
	local DST
	for DST in "${CONF_DSTS[@]}"
	do
		# Skip already mounted mount-points.
		awk "\$2 == \"$DST\" { flag=1; exit 0 } END { if (!flag) { exit 1 } }" </proc/mounts \
			&& continue

		NOTMOUNTED_DSTS=("${NOTMOUNTED_DSTS[@]}" "$DST")
	done


	if [ "${#NOTMOUNTED_DSTS}" -eq 0 ]
	then
		echo "No options available at this time. Exit $BASENAME action mount."
		return 0
	fi

	local CHOICE_TITLE="Select a${USER_MODE:+ user-mountable} mount point to mount:"
	give-choice-title

	local PS3="$(get-baseprompt) mount> "

	local DST
	select DST in "${NOTMOUNTED_DSTS[@]}"
	do
		if [ -z "$DST" ]
		then
			case "$REPLY" in
			\?|help)
				give-hint
				continue
				;;
			0|exit|quit)
				echo "Exit $BASENAME action mount."
				break
				;;
			*)
				warn "mount prompt: Invalid reply \"$REPLY\"!"
				continue
				;;
			esac
		fi

		echo "Mounting $DST ..."
		mount "$DST" || warn "Error: Mounting $DST failed"
	done

	return 0
}

action-umount() {
	local TMP_DSTS=()
	_ONLY_USER=yes read-mounts </etc/fstab
	local CONF_DSTS=("${TMP_DSTS[@]}")


	TMP_DSTS=()
	_ONLY_CONF=yes read-mounts </proc/mounts
	local MOUNTED_DSTS=("${TMP_DSTS[@]}")


	if [ "${#MOUNTED_DSTS}" -eq 0 ]
	then
		echo "No options available at this time. Exit $BASENAME action umount."
		return 0
	fi

	local CHOICE_TITLE="Select a mounted${USER_MODE:+ user-mountable} mount point to umount:"
	give-choice-title

	local PS3="$(get-baseprompt) umount> "

	local DST
	select DST in "${MOUNTED_DSTS[@]}"
	do
		if [ -z "$DST" ]
		then
			case "$REPLY" in
			\?|help)
				give-hint
				continue
				;;
			0|exit|quit)
				echo "Exit $BASENAME action umount."
				break
				;;
			*)
				warn "umount prompt: Invalid reply \"$REPLY\"!"
				continue
				;;
			esac
		fi

		echo "Unmounting $DST ..."
		umount "$DST" || warn "Error: Unmounting $DST failed"
	done

	return 0
}

action-list-mounts() {
	local TMP_DSTS=()
	_ONLY_USER=yes read-mounts </etc/fstab
	local CONF_DSTS=("${TMP_DSTS[@]}")


	TMP_DSTS=()
	_ONLY_CONF=yes read-mounts </proc/mounts
	local MOUNTED_DSTS=("${TMP_DSTS[@]}")


	if [ "${#MOUNTED_DSTS}" -eq 0 ]
	then
		echo "No options available at this time. Exit $BASENAME action list-mounts."
		return 0
	fi

	local CHOICE_TITLE="Retrieve mount details for a configured & mounted mount point:"
	give-choice-title

	local PS3="$(get-baseprompt) list-mounts> "

	local DST
	select DST in "${MOUNTED_DSTS[@]}"
	do
		if [ -z "$DST" ]
		then
			case "$REPLY" in
			\?|help)
				give-hint
				continue
				;;
			0|exit|quit)
				echo "Exit $BASENAME action list-mounts."
				break
				;;
			*)
				warn "list-mounts prompt: Invalid reply \"$REPLY\"!"
				continue
				;;
			esac
		fi

		echo "Mount details for mount point $DST:"
		awk "\$2 == \"$DST\" { print }" </proc/mounts || warn "Error: Extracting mount details for mount point $DST failed"
	done

	return 0
}

action-shell() {
	local TMP_DSTS=()
	_ONLY_USER=yes read-mounts </etc/fstab
	local CONF_DSTS=("${TMP_DSTS[@]}")


	TMP_DSTS=()
	_ONLY_CONF=yes read-mounts </proc/mounts
	local MOUNTED_DSTS=("${TMP_DSTS[@]}")


	if [ "${#MOUNTED_DSTS}" -eq 0 ]
	then
		echo "No options available at this time. Exit $BASENAME action shell."
		return 0
	fi

	local CHOICE_TITLE="Start a sub-shell in a configured & mounted mount point:"
	give-choice-title

	local PS3="$(get-baseprompt) shell> "

	local DST
	select DST in "${MOUNTED_DSTS[@]}"
	do
		if [ -z "$DST" ]
		then
			case "$REPLY" in
			\?|help)
				give-hint
				continue
				;;
			0|exit|quit)
				echo "Exit $BASENAME action shell."
				break
				;;
			*)
				warn "prompt for shell: Invalid reply \"$REPLY\"!"
				continue
				;;
			esac
		fi

		echo "Spawning a sub-shell on mount point $DST ..."
		( cd "$DST" && exec "$SHELL" ) || warn "Error: Sub-shell on mount point $DST exited unsuccessfully"
		echo "Continuing $BASENAME."
	done

	return 0
}

action-kerberos() {
	local CHOICE_TITLE="Select a Kerberos command to run:"
	give-choice-title

	local PS3="$(get-baseprompt) kerberos> "

	local CREDENTIALS_CACHE=
	local CMD
	local VALID_CMDS=(kinit kdestroy klist select-credentials-cache)
	select CMD in "${VALID_CMDS[@]}"
	do
		if [ -z "$CMD" ]
		then
			case "$REPLY" in
			\?|help)
				give-hint
				continue
				;;
			0|exit|quit)
				echo "Exit $BASENAME action kerberos."
				break
				;;
			*)
				# Try to lookup a command for the reply string-wise.
				local OTHER_CMD
				for OTHER_CMD in "${VALID_CMDS[@]}"
				do
					if [ "$REPLY" = "$OTHER_CMD" ]
					then
						CMD="$OTHER_CMD"
						break
					fi
				done

				# Still no command to execute?
				if [ -z "$CMD" ]
				then
					warn "kerberos prompt: Invalid reply \"$REPLY\"!"
					continue
				fi
				# Otherwise, fall-through.
				;;
			esac
		fi

		case "$CMD" in
		select-credentials-cache)
			local CC_OPTIONS=()

			local CC_BASES=(/tmp/krb5cc_$(id -u))
			if [ -z "$USER_MODE" ]
			then
				CC_BASES=("${CC_BASES[@]}" /tmp/krb5ccmachine)
			fi

			local CC_BASE
			for CC_BASE in "${CC_BASES[@]}"
			do
				CC_OPTIONS=("${CC_OPTIONS[@]}" "$CC_BASE")
				local CC_OPTION
				for CC_OPTION in "$CC_BASE"_*
				do
					# Skip failed glob.
					[ "$CC_OPTION" = "${CC_BASE}_*" ] && continue

					CC_OPTIONS=("${CC_OPTIONS[@]}" "$CC_OPTION")
				done
			done

			local ORIG_PS3="$PS3"
			PS3="$(get-baseprompt) kerberos cache> "
			select CREDENTIALS_CACHE in default "${CC_OPTIONS[@]}"
			do
				if [ -z "$CREDENTIALS_CACHE" ]
				then
					CREDENTIALS_CACHE="$REPLY"
				elif [ "$CREDENTIALS_CACHE" = "default" ]
				then
					CREDENTIALS_CACHE=
				fi
				break
			done
			PS3="$ORIG_PS3"
			continue
			;;
		esac

		local BASE_MSG="Running Kerberos command $CMD${CREDENTIALS_CACHE:+ (on credentials cache $CREDENTIALS_CACHE)}"
		echo "$BASE_MSG ..."
		echo
		{ "$CMD" ${CREDENTIALS_CACHE:+-c "$CREDENTIALS_CACHE"} && echo; } \
			|| { echo; warn "Error: $BASE_MSG failed"; }
	done

	return 0
}

action-toggle-user-mode() {
	if [ -n "$USER_MODE" ]
	then
		USER_MODE=
	else
		USER_MODE="user mode"
	fi
	PS3="$(get-baseprompt)> "
}


USER_MODE="user mode"
[ "$UID" -eq 0 ] && USER_MODE=

CHOICE_TITLE="What do you want to do today?"

give-choice-title() {
	echo
	echo "$CHOICE_TITLE"
	echo
}
give-hint() {
	give-choice-title
	echo "Hint: Enter the number of an option you want to invoke,"
	echo "      or 0 or ^D (Ctrl-D, End-of-Transmission) to exit"
	echo "      to enclosing scope. Press enter without any input"
	echo "      to repeat the list of options."
	echo
}
give-hint

ORIG_PS3="$PS3"

get-baseprompt() {
	echo -n "(${USER_MODE:-root mode}) $BASENAME"
}
PS3="$(get-baseprompt)> "

VALID_ACTIONS=(mount umount list-mounts shell kerberos toggle-user-mode)
select ACTION in "${VALID_ACTIONS[@]}"
do
	if [ -z "$ACTION" ]
	then
		case "$REPLY" in
		\?|help)
			give-hint
			continue
			;;
		0|exit|quit)
			echo "Exit $BASENAME."
			break
			;;
		*)
			# Try to lookup an action for the reply string-wise.
			for OTHER_ACTION in "${VALID_ACTIONS[@]}"
			do
				if [ "$REPLY" = "$OTHER_ACTION" ]
				then
					ACTION="$OTHER_ACTION"
					break
				fi
			done

			# Still no action to invoke?
			if [ -z "$ACTION" ]
			then
				warn "Invalid reply \"$REPLY\"!"
				continue
			fi
			# Otherwise, fall-through.
			;;
		esac
	fi

	action-"$ACTION" || warn "Warning: Action \"$ACTION\" seems to have been unsuccessful."
done

exit 0
